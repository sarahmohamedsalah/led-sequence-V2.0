
light sequence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001683  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ccb  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000033a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ef  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f77  00000000  00000000  00003bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004b76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  74:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BTN0_Init>:
#include "BUTTON.h"


EN_buttonError_t BTN0_Init(uint8_t buttonPort, uint8_t buttonPin)
{ EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORTD)
  7c:	92 b3       	in	r25, 0x12	; 18
  7e:	98 17       	cp	r25, r24
  80:	48 f0       	brcs	.+18     	; 0x94 <BTN0_Init+0x18>
	{
		error = WRONG_BUTTON_PORT;
	}
	else if (buttonPin > 7)
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	48 f4       	brcc	.+18     	; 0x98 <BTN0_Init+0x1c>
	{
		error = WRONG_BUTTON_PIN;
	}
	else {
		DIO_SetPin_Direction(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_SetPin_Direction>
		error = BUTTON_OK;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	08 95       	ret

EN_buttonError_t BTN0_Init(uint8_t buttonPort, uint8_t buttonPin)
{ EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORTD)
	{
		error = WRONG_BUTTON_PORT;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	08 95       	ret
	}
	else if (buttonPin > 7)
	{
		error = WRONG_BUTTON_PIN;
  98:	82 e0       	ldi	r24, 0x02	; 2
		DIO_SetPin_Direction(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
		error = BUTTON_OK;

	}
	return error;
}
  9a:	08 95       	ret

0000009c <LED0_Init>:
        DIO_TogglePin(DIO_PORTC, DIO_PIN2);
        error = LED_OK;
    }

    return error;
}
  9c:	95 b3       	in	r25, 0x15	; 21
  9e:	98 17       	cp	r25, r24
  a0:	48 f0       	brcs	.+18     	; 0xb4 <LED0_Init+0x18>
  a2:	68 30       	cpi	r22, 0x08	; 8
  a4:	48 f4       	brcc	.+18     	; 0xb8 <LED0_Init+0x1c>
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_SetPin_Direction>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	08 95       	ret
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	08 95       	ret
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 95       	ret

000000bc <LED0_ON>:
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	98 17       	cp	r25, r24
  c0:	48 f0       	brcs	.+18     	; 0xd4 <LED0_ON+0x18>
  c2:	68 30       	cpi	r22, 0x08	; 8
  c4:	48 f4       	brcc	.+18     	; 0xd8 <LED0_ON+0x1c>
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	08 95       	ret

000000dc <LED0_OFF>:
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	98 17       	cp	r25, r24
  e0:	48 f0       	brcs	.+18     	; 0xf4 <LED0_OFF+0x18>
  e2:	68 30       	cpi	r22, 0x08	; 8
  e4:	48 f4       	brcc	.+18     	; 0xf8 <LED0_OFF+0x1c>
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	08 95       	ret

000000fc <LED1_Init>:
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	98 17       	cp	r25, r24
 100:	48 f0       	brcs	.+18     	; 0x114 <LED1_Init+0x18>
 102:	68 30       	cpi	r22, 0x08	; 8
 104:	48 f4       	brcc	.+18     	; 0x118 <LED1_Init+0x1c>
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_SetPin_Direction>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	08 95       	ret

0000011c <LED1_ON>:
 11c:	95 b3       	in	r25, 0x15	; 21
 11e:	98 17       	cp	r25, r24
 120:	48 f0       	brcs	.+18     	; 0x134 <LED1_ON+0x18>
 122:	68 30       	cpi	r22, 0x08	; 8
 124:	48 f4       	brcc	.+18     	; 0x138 <LED1_ON+0x1c>
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	08 95       	ret

0000013c <LED1_OFF>:
 13c:	95 b3       	in	r25, 0x15	; 21
 13e:	98 17       	cp	r25, r24
 140:	48 f0       	brcs	.+18     	; 0x154 <LED1_OFF+0x18>
 142:	68 30       	cpi	r22, 0x08	; 8
 144:	48 f4       	brcc	.+18     	; 0x158 <LED1_OFF+0x1c>
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	08 95       	ret

0000015c <LED2_Init>:
 15c:	95 b3       	in	r25, 0x15	; 21
 15e:	98 17       	cp	r25, r24
 160:	48 f0       	brcs	.+18     	; 0x174 <LED2_Init+0x18>
 162:	68 30       	cpi	r22, 0x08	; 8
 164:	48 f4       	brcc	.+18     	; 0x178 <LED2_Init+0x1c>
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_SetPin_Direction>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	08 95       	ret

0000017c <LED2_ON>:
 17c:	95 b3       	in	r25, 0x15	; 21
 17e:	98 17       	cp	r25, r24
 180:	48 f0       	brcs	.+18     	; 0x194 <LED2_ON+0x18>
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	48 f4       	brcc	.+18     	; 0x198 <LED2_ON+0x1c>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	08 95       	ret

0000019c <LED2_OFF>:
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	98 17       	cp	r25, r24
 1a0:	48 f0       	brcs	.+18     	; 0x1b4 <LED2_OFF+0x18>
 1a2:	68 30       	cpi	r22, 0x08	; 8
 1a4:	48 f4       	brcc	.+18     	; 0x1b8 <LED2_OFF+0x1c>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	08 95       	ret
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	08 95       	ret

000001bc <LED3_Init>:

EN_ledError_t LED3_Init(uint8_t ledPort,uint8_t ledPin)
{

    EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
 1bc:	95 b3       	in	r25, 0x15	; 21
 1be:	98 17       	cp	r25, r24
 1c0:	48 f0       	brcs	.+18     	; 0x1d4 <LED3_Init+0x18>
    {
        error = WRONG_LED_PORT;
    }
    else if (ledPin > 7)
 1c2:	68 30       	cpi	r22, 0x08	; 8
 1c4:	48 f4       	brcc	.+18     	; 0x1d8 <LED3_Init+0x1c>
        error = WRONG_LED_PIN;
    }
    else
    {

        DIO_SetPin_Direction(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_SetPin_Direction>
        error = LED_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
{

    EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
    {
        error = WRONG_LED_PORT;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
    }
    else if (ledPin > 7)
    {
        error = WRONG_LED_PIN;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
        DIO_SetPin_Direction(DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT);
        error = LED_OK;
    }

    return error;
}
 1da:	08 95       	ret

000001dc <LED3_ON>:
EN_ledError_t LED3_ON(uint8_t ledPort,uint8_t ledPin)

{
    EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
 1dc:	95 b3       	in	r25, 0x15	; 21
 1de:	98 17       	cp	r25, r24
 1e0:	48 f0       	brcs	.+18     	; 0x1f4 <LED3_ON+0x18>
    {
        error = WRONG_LED_PORT;
    }
    else if (ledPin > 7)
 1e2:	68 30       	cpi	r22, 0x08	; 8
 1e4:	48 f4       	brcc	.+18     	; 0x1f8 <LED3_ON+0x1c>
        error = WRONG_LED_PIN;
    }
    else
    {

        DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_PIN_HIGH);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
        error = LED_OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

{
    EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
    {
        error = WRONG_LED_PORT;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
    }
    else if (ledPin > 7)
    {
        error = WRONG_LED_PIN;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
        DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_PIN_HIGH);
        error = LED_OK;
    }

    return error;
}
 1fa:	08 95       	ret

000001fc <LED3_OFF>:
EN_ledError_t LED3_OFF(uint8_t ledPort,uint8_t ledPin)
{EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
 1fc:	95 b3       	in	r25, 0x15	; 21
 1fe:	98 17       	cp	r25, r24
 200:	48 f0       	brcs	.+18     	; 0x214 <LED3_OFF+0x18>
    {
        error = WRONG_LED_PORT;
    }
    else if (ledPin > 7)
 202:	68 30       	cpi	r22, 0x08	; 8
 204:	48 f4       	brcc	.+18     	; 0x218 <LED3_OFF+0x1c>
    {
        error = WRONG_LED_PIN;
    }
    else
    {
        DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_PIN_LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_SetPin_Value>
        error = LED_OK;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret
}
EN_ledError_t LED3_OFF(uint8_t ledPort,uint8_t ledPin)
{EN_ledError_t error = LED_OK;
    if (ledPort > PORTC)
    {
        error = WRONG_LED_PORT;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
    }
    else if (ledPin > 7)
    {
        error = WRONG_LED_PIN;
 218:	82 e0       	ldi	r24, 0x02	; 2
        DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_PIN_LOW);
        error = LED_OK;
    }

    return error;
}
 21a:	08 95       	ret

0000021c <main>:
static Uint8t counter =0 ;
int main() {
//	static Uint8t buttonstate=0;
	//BTN0_Init();
	
	  BTN0_Init(PORTD, 2);
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	0e 94 3e 00 	call	0x7c	; 0x7c <BTN0_Init>
	  LED0_Init(PORTC,2);
 224:	85 b3       	in	r24, 0x15	; 21
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	0e 94 4e 00 	call	0x9c	; 0x9c <LED0_Init>
	  LED1_Init(PORTC,3);
 22c:	85 b3       	in	r24, 0x15	; 21
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	0e 94 7e 00 	call	0xfc	; 0xfc <LED1_Init>
	  LED2_Init(PORTC,4);
 234:	85 b3       	in	r24, 0x15	; 21
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	0e 94 ae 00 	call	0x15c	; 0x15c <LED2_Init>
	  LED3_Init(PORTC,5);
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	0e 94 de 00 	call	0x1bc	; 0x1bc <LED3_Init>
EXT_INT0_Init();
 244:	0e 94 a8 02 	call	0x550	; 0x550 <EXT_INT0_Init>
		
	}
	
		
		*/
		  if(counter ==1){
 248:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	29 f4       	brne	.+10     	; 0x25a <main+0x3e>
			  LED0_ON(PORTC, 2);
 250:	85 b3       	in	r24, 0x15	; 21
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	0e 94 5e 00 	call	0xbc	; 0xbc <LED0_ON>
 258:	f7 cf       	rjmp	.-18     	; 0x248 <main+0x2c>

			  }else if(counter ==2){
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	49 f4       	brne	.+18     	; 0x270 <main+0x54>
			  LED1_ON(PORTC, 3);
 25e:	85 b3       	in	r24, 0x15	; 21
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	0e 94 8e 00 	call	0x11c	; 0x11c <LED1_ON>
			  LED0_ON(PORTC, 2);
 266:	85 b3       	in	r24, 0x15	; 21
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	0e 94 5e 00 	call	0xbc	; 0xbc <LED0_ON>
 26e:	ec cf       	rjmp	.-40     	; 0x248 <main+0x2c>
			  }else if(counter ==3){
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	69 f4       	brne	.+26     	; 0x28e <main+0x72>
			  LED2_ON(PORTC, 4);
 274:	85 b3       	in	r24, 0x15	; 21
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	0e 94 be 00 	call	0x17c	; 0x17c <LED2_ON>
			  LED1_ON(PORTC, 3);
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	0e 94 8e 00 	call	0x11c	; 0x11c <LED1_ON>
			  LED0_ON(PORTC, 2);
 284:	85 b3       	in	r24, 0x15	; 21
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	0e 94 5e 00 	call	0xbc	; 0xbc <LED0_ON>
 28c:	dd cf       	rjmp	.-70     	; 0x248 <main+0x2c>
			  }else if (counter ==4){
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	89 f4       	brne	.+34     	; 0x2b4 <main+0x98>
			  LED3_ON(PORTC, 5);
 292:	85 b3       	in	r24, 0x15	; 21
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED3_ON>
			  LED2_ON(PORTC, 4);
 29a:	85 b3       	in	r24, 0x15	; 21
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	0e 94 be 00 	call	0x17c	; 0x17c <LED2_ON>
			  LED1_ON(PORTC, 3);
 2a2:	85 b3       	in	r24, 0x15	; 21
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	0e 94 8e 00 	call	0x11c	; 0x11c <LED1_ON>
			  LED0_ON(PORTC, 2);
 2aa:	85 b3       	in	r24, 0x15	; 21
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	0e 94 5e 00 	call	0xbc	; 0xbc <LED0_ON>
 2b2:	ca cf       	rjmp	.-108    	; 0x248 <main+0x2c>
			  }else if (counter ==5){
 2b4:	85 30       	cpi	r24, 0x05	; 5
 2b6:	89 f4       	brne	.+34     	; 0x2da <main+0xbe>
			  LED0_OFF(PORTC, 2);
 2b8:	85 b3       	in	r24, 0x15	; 21
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	0e 94 6e 00 	call	0xdc	; 0xdc <LED0_OFF>
			  LED3_ON(PORTC, 5);
 2c0:	85 b3       	in	r24, 0x15	; 21
 2c2:	65 e0       	ldi	r22, 0x05	; 5
 2c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED3_ON>
			  LED2_ON(PORTC, 4);
 2c8:	85 b3       	in	r24, 0x15	; 21
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	0e 94 be 00 	call	0x17c	; 0x17c <LED2_ON>
			  LED1_ON(PORTC, 3);
 2d0:	85 b3       	in	r24, 0x15	; 21
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	0e 94 8e 00 	call	0x11c	; 0x11c <LED1_ON>
 2d8:	b7 cf       	rjmp	.-146    	; 0x248 <main+0x2c>
			  }else if (counter ==6){
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	89 f4       	brne	.+34     	; 0x300 <main+0xe4>
			  LED0_OFF(PORTC, 2);
 2de:	85 b3       	in	r24, 0x15	; 21
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	0e 94 6e 00 	call	0xdc	; 0xdc <LED0_OFF>
			  LED3_ON(PORTC, 5);
 2e6:	85 b3       	in	r24, 0x15	; 21
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED3_ON>
			  LED2_ON(PORTC, 4);
 2ee:	85 b3       	in	r24, 0x15	; 21
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	0e 94 be 00 	call	0x17c	; 0x17c <LED2_ON>
			  LED1_OFF(PORTC, 3);
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	63 e0       	ldi	r22, 0x03	; 3
 2fa:	0e 94 9e 00 	call	0x13c	; 0x13c <LED1_OFF>
 2fe:	a4 cf       	rjmp	.-184    	; 0x248 <main+0x2c>
		  }
		  else if (counter ==7){
 300:	87 30       	cpi	r24, 0x07	; 7
 302:	89 f4       	brne	.+34     	; 0x326 <main+0x10a>
			  LED0_OFF(PORTC, 2);
 304:	85 b3       	in	r24, 0x15	; 21
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	0e 94 6e 00 	call	0xdc	; 0xdc <LED0_OFF>
			  LED3_ON(PORTC, 5);
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED3_ON>
			  LED2_OFF(PORTC, 4);
 314:	85 b3       	in	r24, 0x15	; 21
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	0e 94 ce 00 	call	0x19c	; 0x19c <LED2_OFF>
			  LED1_OFF(PORTC, 3);
 31c:	85 b3       	in	r24, 0x15	; 21
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	0e 94 9e 00 	call	0x13c	; 0x13c <LED1_OFF>
 324:	91 cf       	rjmp	.-222    	; 0x248 <main+0x2c>
			  }else if (counter ==8){
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	89 f4       	brne	.+34     	; 0x34c <main+0x130>
			  LED0_OFF(PORTC, 2);
 32a:	85 b3       	in	r24, 0x15	; 21
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	0e 94 6e 00 	call	0xdc	; 0xdc <LED0_OFF>
			  LED3_OFF(PORTC, 5);
 332:	85 b3       	in	r24, 0x15	; 21
 334:	65 e0       	ldi	r22, 0x05	; 5
 336:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LED3_OFF>
			  LED2_ON(PORTC, 4);
 33a:	85 b3       	in	r24, 0x15	; 21
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	0e 94 be 00 	call	0x17c	; 0x17c <LED2_ON>
			  LED1_OFF(PORTC, 3);
 342:	85 b3       	in	r24, 0x15	; 21
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	0e 94 9e 00 	call	0x13c	; 0x13c <LED1_OFF>
 34a:	7e cf       	rjmp	.-260    	; 0x248 <main+0x2c>
			  }else if (counter ==9) {
 34c:	89 30       	cpi	r24, 0x09	; 9
 34e:	09 f0       	breq	.+2      	; 0x352 <main+0x136>
 350:	7b cf       	rjmp	.-266    	; 0x248 <main+0x2c>
		
		



	}
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret

00000358 <__vector_1>:


ISR(INT0_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
	
	counter ++;
 366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	98 0f       	add	r25, r24
	if(counter < counter_number){
 36e:	99 30       	cpi	r25, 0x09	; 9
 370:	20 f4       	brcc	.+8      	; 0x37a <__vector_1+0x22>
		
		counter++;
 372:	8e 5f       	subi	r24, 0xFE	; 254
 374:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 378:	02 c0       	rjmp	.+4      	; 0x37e <__vector_1+0x26>
		}else{
		counter =0;
 37a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
 38c:	44 23       	and	r20, r20
 38e:	19 f0       	breq	.+6      	; 0x396 <DIO_SetPin_Direction+0xa>
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	c9 f1       	breq	.+114    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 394:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	91 f0       	breq	.+36     	; 0x3be <DIO_SetPin_Direction+0x32>
 39a:	28 f0       	brcs	.+10     	; 0x3a6 <DIO_SetPin_Direction+0x1a>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	d9 f0       	breq	.+54     	; 0x3d6 <DIO_SetPin_Direction+0x4a>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	29 f1       	breq	.+74     	; 0x3ee <DIO_SetPin_Direction+0x62>
 3a4:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 3a6:	2a b3       	in	r18, 0x1a	; 26
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_SetPin_Direction+0x26>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_SetPin_Direction+0x22>
 3b6:	80 95       	com	r24
 3b8:	82 23       	and	r24, r18
 3ba:	8a bb       	out	0x1a, r24	; 26
			break;
 3bc:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 3be:	27 b3       	in	r18, 0x17	; 23
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPin_Direction+0x3e>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPin_Direction+0x3a>
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	87 bb       	out	0x17, r24	; 23
			break;
 3d4:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 3d6:	24 b3       	in	r18, 0x14	; 20
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPin_Direction+0x56>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPin_Direction+0x52>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	84 bb       	out	0x14, r24	; 20
			break;
 3ec:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 3ee:	21 b3       	in	r18, 0x11	; 17
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_SetPin_Direction+0x6e>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_SetPin_Direction+0x6a>
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	81 bb       	out	0x11, r24	; 17
			break;
 404:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	89 f0       	breq	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40a:	28 f0       	brcs	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	c9 f0       	breq	.+50     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	11 f1       	breq	.+68     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 414:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 416:	2a b3       	in	r18, 0x1a	; 26
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	8a bb       	out	0x1a, r24	; 26
			break;
 42a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 42c:	27 b3       	in	r18, 0x17	; 23
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	87 bb       	out	0x17, r24	; 23
			break;
 440:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 442:	24 b3       	in	r18, 0x14	; 20
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	82 2b       	or	r24, r18
 454:	84 bb       	out	0x14, r24	; 20
			break;
 456:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	81 bb       	out	0x11, r24	; 17
 46c:	08 95       	ret

0000046e <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
 46e:	44 23       	and	r20, r20
 470:	19 f0       	breq	.+6      	; 0x478 <DIO_SetPin_Value+0xa>
 472:	41 30       	cpi	r20, 0x01	; 1
 474:	c9 f1       	breq	.+114    	; 0x4e8 <DIO_SetPin_Value+0x7a>
 476:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	91 f0       	breq	.+36     	; 0x4a0 <DIO_SetPin_Value+0x32>
 47c:	28 f0       	brcs	.+10     	; 0x488 <DIO_SetPin_Value+0x1a>
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_SetPin_Value+0x4a>
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	29 f1       	breq	.+74     	; 0x4d0 <DIO_SetPin_Value+0x62>
 486:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 488:	2b b3       	in	r18, 0x1b	; 27
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_SetPin_Value+0x26>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_SetPin_Value+0x22>
 498:	80 95       	com	r24
 49a:	82 23       	and	r24, r18
 49c:	8b bb       	out	0x1b, r24	; 27
			break;
 49e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 4a0:	28 b3       	in	r18, 0x18	; 24
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_SetPin_Value+0x3e>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_SetPin_Value+0x3a>
 4b0:	80 95       	com	r24
 4b2:	82 23       	and	r24, r18
 4b4:	88 bb       	out	0x18, r24	; 24
			break;
 4b6:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 4b8:	25 b3       	in	r18, 0x15	; 21
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_SetPin_Value+0x56>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_SetPin_Value+0x52>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	85 bb       	out	0x15, r24	; 21
			break;
 4ce:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 4d0:	22 b3       	in	r18, 0x12	; 18
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_SetPin_Value+0x6e>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_SetPin_Value+0x6a>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	82 bb       	out	0x12, r24	; 18
			break;
 4e6:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	89 f0       	breq	.+34     	; 0x50e <DIO_SetPin_Value+0xa0>
 4ec:	28 f0       	brcs	.+10     	; 0x4f8 <DIO_SetPin_Value+0x8a>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	c9 f0       	breq	.+50     	; 0x524 <DIO_SetPin_Value+0xb6>
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	11 f1       	breq	.+68     	; 0x53a <DIO_SetPin_Value+0xcc>
 4f6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_SetPin_Value+0x96>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_SetPin_Value+0x92>
 508:	82 2b       	or	r24, r18
 50a:	8b bb       	out	0x1b, r24	; 27
			break;
 50c:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 50e:	28 b3       	in	r18, 0x18	; 24
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_SetPin_Value+0xac>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_SetPin_Value+0xa8>
 51e:	82 2b       	or	r24, r18
 520:	88 bb       	out	0x18, r24	; 24
			break;
 522:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 524:	25 b3       	in	r18, 0x15	; 21
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_SetPin_Value+0xc2>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_SetPin_Value+0xbe>
 534:	82 2b       	or	r24, r18
 536:	85 bb       	out	0x15, r24	; 21
			break;
 538:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 53a:	22 b3       	in	r18, 0x12	; 18
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_SetPin_Value+0xd8>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_SetPin_Value+0xd4>
 54a:	82 2b       	or	r24, r18
 54c:	82 bb       	out	0x12, r24	; 18
 54e:	08 95       	ret

00000550 <EXT_INT0_Init>:
//#define counter_number 9
//Uint8t counter =0;
void EXT_INT0_Init(void)
{
	/*Step 1- Disable Global Interrupt*/
	cli();
 550:	f8 94       	cli
	//CLR_BIT(SREG, 7);
	/*Define Logic for Firing interrupt*/
	CLR_BIT(MCUCR, ISC00);
 552:	84 b7       	in	r24, 0x34	; 52
 554:	95 b7       	in	r25, 0x35	; 53
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	95 bf       	out	0x35, r25	; 53
 55a:	84 bf       	out	0x34, r24	; 52
	SET_BIT(MCUCR, ISC01);
 55c:	84 b7       	in	r24, 0x34	; 52
 55e:	95 b7       	in	r25, 0x35	; 53
 560:	82 60       	ori	r24, 0x02	; 2
 562:	95 bf       	out	0x35, r25	; 53
 564:	84 bf       	out	0x34, r24	; 52
	/*Enable Peripheral interrupt*/
	SET_BIT(GICR, 6);
 566:	8b b7       	in	r24, 0x3b	; 59
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	8b bf       	out	0x3b, r24	; 59
	/*Enable Global Interrupt*/
	sei();
 56c:	78 94       	sei
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
